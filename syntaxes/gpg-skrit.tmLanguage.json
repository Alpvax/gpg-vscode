{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "gpg-skrit",
  "patterns": [
    {
      "begin": "\\A/{78}",
      "end": "^/{78}",
      "name": "comment.block.header.gpg-skrit",
      "patterns": [{
        "match": "^(?!//)",
        "name": "invalid.illegal.non-comment-in-header.gpg-skrit"
      }]
    },
    {
      "include": "#preprocess"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#values"
    },
    {
      "include": "#variables"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.gpg-skrit"
            }
          },
          "match": "/\\*\\*/",
          "name": "comment.block.empty.gpg-skrit"
        },
        {
          "include": "#comments-inline"
        }
      ]
    },
    "comments-inline": {
      "patterns": [
        {
          "begin": "/\\*",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.gpg-skrit"
            }
          },
          "end": "\\*/",
          "name": "comment.block.gpg-skrit"
        },
        {
          "begin": "(^[ \\t]+)?(?=//)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.gpg-skrit"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "begin": "//",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.gpg-skrit"
                }
              },
              "end": "\\n",
              "name": "comment.line.double-slash.gpg-skrit"
            }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.gpg-skrit",
          "match": "\\b(if|else|while|break|continue|forever|return|sitnspin|abort)\\b"
        },
        {
          "name": "keyword.other.event.gpg-skrit",
          "match": "\\b(event|trigger|at|msec|frames)\\b"
        },
        {
          "name": "keyword.other.state.gpg-skrit",
          "match": "(\\b(state|poll|transition|and|startup|setstate)\\b)|->"
        },
        {
          "name": "keyword.operator.comparison.gpg-skrit",
          "match": "<|<=|(?<!-)>|>=|==|!=|<>"
        },
        {
          "name": "keyword.operator.comparison.approx.gpg-skrit",
          "comment": "Strings will do a case-insensitive test, and floats will do an “approximately equal” test using an epsilon value.",
          "match": "~="
        },
        {
          "name": "keyword.operator.logical.gpg-skrit",
          "comment": "DO NOT SHORT CIRCUIT!",
          "match": "\\|\\||&&"
        },
        {
          "name": "keyword.operator.arithmetic.gpg-skrit",
          "match": "\\-|\\+|\\*|(?<!/)/(?!/)|%|\\*\\*"
        },
        {
          "name": "keyword.operator.assignment.gpg-skrit",
          "match": "="
        },
        {
          "name": "keyword.operator.assignment.arithmetic.gpg-skrit",
          "match": "(\\-|\\+|\\*|(?<!/)/(?!/)|%|\\*\\*)="
        },
        {
          "match": "\\?|:",
          "name": "keyword.control.ternary.gpg-skrit"
        },
        {
          "match": "\\||\\^|&",
          "name": "keyword.operator.bitwise.gpg-skrit"
        },
        {
          "match": "(\\||\\^|&)=",
          "name": "keyword.operator.assignment.bitwise.gpg-skrit"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "entity.name.type.gpg-skrit",
          "match": "\\b(bool|int|float|string|void|Goid)\\b"
        },
        {
          "comment": "Probably incorrect. TODO: Needs work",
          "name": "storage.type.gpg-skrit",
          "match": "\\b(shared|property|hidden|doc)\\b"
        },
        {
          "name": "entity.name.type.enum.gpg-skrit",
          "match": "\\b(eBoundaryTest|eBoundaryCrossType|eReqRetCode|eRequest|eDependancyType|eRID|eReqFlag|eOrientMode|eAnimEvent|eJobResult|eDoJobMode|eRangeLimit|eFocusOrders|eCombatOrders|eMovementOrders|eWeaponPreference|eActorDisposition|eQPlace|eJobQ|eJobAbstractType|eGameStat|eCameraMode|eDropInvOption|eBoneFreeze|eMoodRoomType|eLogicalNodeFlags|eWorldState|eWorldEvent|eAlteration|eAnimStance|eAnimChore|eCameraOrder|eCameraInterpolate|JUSTIFICATION|eUIMessage|UI_ACTION|UI_INPUT_TYPE|UI_CONTROL_TYPE|eAxisHint|eVoiceSound|eActionOrigin|eQueryTrait|eUsageContextFlags|eTargetTypeFlags|eMagicClass|eDefendClass|eAttackClass|eInventoryLocation|eEquipSlot|ePContentType|eActorAlignment|eLifeState|ePlayerController)\\b"
        }
      ]
    },
    "constants": {
      "patterns": [{
          "name": "constant.language.gpg-skrit",
          "match": "\\b(true|false|null)\\b"
        },
        {
          "name": "variable.language.special.gpg-skrit",
          "match": "\\b(__LINE__|__NAME__|this|vm|owner)\\b"
        }
      ]
    },
    "preprocess": {
      "patterns": [
        {
          "name": "meta.preprocessor.gpg-skrit",
          "match": "(?<!\\w)#(include|option)\\b"
        },
        {
          "name": "meta.preprocessor.only.gpg-skrit",
          "begin": "(?<!\\w)#only\\s*\\(",
          "end": "\\s*(\\w+)\\s*\\",
          "patterns": [{
            "name": "variable.name.only.gpg-skrit"
          }]
        },
        {
          "begin": "\\[\\[",
          "end": "\\]\\]",
          "patterns": [
            { "include": "$self" }
          ]
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.gpg-skrit",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.gpg-skrit",
          "match": "\\\\([abvtnfr\"\\\\]|\\x[0-9a-fA-F]{2})"
        },
        {
          "name": "invalid.illegal.unrecognized-string-escape.gpg-skrit",
          "match": "\\\\[^abvtnfr\"\\x]"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.decimal.gpg-skrit",
          "match": "[+-]?\\d+(\\.\\d+)?([eE][+-]?\\d+)?"
        },
        {
          "name": "constant.numeric.hexadecimal.gpg-skrit",
          "match": "[+-]?0[xX][0-9a-zA-Z]+"
        },
        {
          "name": "constant.numeric.fourcc.gpg-skrit",
          "match": "'[0-9a-zA-Z]{,4}'"
        }
      ]
    },
    "values": {
      "patterns": [
        {
          "include": "#constants"
        },
        {
          "include": "#numbers"
        },
        {
          "include": "#strings"
        }
      ]
    },
    "variables": {
      "patterns": [{
        "name": "variable.other.user.gpg-skrit",
        "match": "\\b[_a-zA-Z]\\w*\\$(?=\\W)"
      }]
    }
  },
  "scopeName": "source.gpg-skrit"
}
